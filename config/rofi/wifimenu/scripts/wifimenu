#!/bin/bash
#
#  █     █░ ██▓  █████▒██▓ ███▄ ▄███▓▓█████  ███▄    █  █    ██     ▄▄▄▄ ▓██   ██▓
# ▓█░ █ ░█░▓██▒▓██   ▒▓██▒▓██▒▀█▀ ██▒▓█   ▀  ██ ▀█   █  ██  ▓██▒   ▓█████▄▒██  ██▒
# ▒█░ █ ░█ ▒██▒▒████ ░▒██▒▓██    ▓██░▒███   ▓██  ▀█ ██▒▓██  ▒██░   ▒██▒ ▄██▒██ ██░
# ░█░ █ ░█ ░██░░▓█▒  ░░██░▒██    ▒██ ▒▓█  ▄ ▓██▒  ▐▌██▒▓▓█  ░██░   ▒██░█▀  ░ ▐██▓░
# ░░██▒██▓ ░██░░▒█░   ░██░▒██▒   ░██▒░▒████▒▒██░   ▓██░▒▒█████▓    ░▓█  ▀█▓░ ██▒▓░
# ░ ▓░▒ ▒  ░▓   ▒ ░   ░▓  ░ ▒░   ░  ░░░ ▒░ ░░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒    ░▒▓███▀▒ ██▒▒▒ 
#   ▒ ░ ░   ▒ ░ ░      ▒ ░░  ░      ░ ░ ░  ░░ ░░   ░ ▒░░░▒░ ░ ░    ▒░▒   ░▓██ ░▒░ 
#   ░   ░   ▒ ░ ░ ░    ▒ ░░      ░      ░      ░   ░ ░  ░░░ ░ ░     ░    ░▒ ▒ ░░  
#     ░     ░          ░         ░      ░  ░         ░    ░         ░     ░ ░     
#                                                                        ░░ ░     
#                 ███▄ ▄███▓ ██▀███        ▄▄▄▄ ▓██   ██▓ ▄▄▄                     
#                ▓██▒▀█▀ ██▒▓██ ▒ ██▒     ▓█████▄▒██  ██▒▒████▄                   
#                ▓██    ▓██░▓██ ░▄█ ▒     ▒██▒ ▄██▒██ ██░▒██  ▀█▄                 
#                ▒██    ▒██ ▒██▀▀█▄       ▒██░█▀  ░ ▐██▓░░██▄▄▄▄██                
#                ▒██▒   ░██▒░██▓ ▒██▒ ██▓ ░▓█  ▀█▓░ ██▒▓░ ▓█   ▓██▒               
#                ░ ▒░   ░  ░░ ▒▓ ░▒▓░ ▒▓▒ ░▒▓███▀▒ ██▒▒▒  ▒▒   ▓▒█░               
#                ░  ░      ░  ░▒ ░ ▒░ ░▒  ▒░▒   ░▓██ ░▒░   ▒   ▒▒ ░               
#                ░      ░     ░░   ░  ░    ░    ░▒ ▒ ░░    ░   ▒                  
#                       ░      ░       ░   ░     ░ ░           ░  ░               
#                                      ░        ░░ ░                              
#
# Script setup
wifimenu_dir="$(dirname "${BASH_SOURCE[0]}")/.."
chmod +r $wifimenu_dir/scripts/wifidaemon/wifidaemon_setup
source $wifimenu_dir/scripts/wifidaemon/wifidaemon_setup

# Theming
conf_dir=$wifimenu_dir/config
theme_wifimenu=$conf_dir/wifimenu.rasi
theme_pwd_prompt=$conf_dir/pwd.rasi

# Dmenu tags
tag_not_connected=""
tag_wifi_disable="󰤭      Disable Wi-Fi"
tag_wifi_enable="󱚽      Enable Wi-Fi"
tag_manage_known="󱚾      Manage known networks"
tag_manage_known_prompt="󱚾      Manage network:"
tag_forget_connection="󰜺      Forget connection"
tag_autoconnect_on="      Autoconnect:    "
tag_autoconnect_off="      Autoconnect:    "
tag_back="      Back"
tag_rescan="      Re-scan"

# Themed dmenu with a selection offset
rofi_menu_offset() {
    rofi \
        -dmenu \
        -i \
        -selected-row "$2" \
        -p "$1" \
        -l "$3" \
        -theme $theme_wifimenu
}

# Themed dmenu w/o a selection offset
rofi_menu() {
    rofi_menu_offset "$1" 0 $2
}

# Password promt dmenu
rofi_pwd_prompt() {
    rofi \
        -dmenu \
        -p "Password: " \
        -password \
        -theme $theme_pwd_prompt 
}

# Check last scan by the wifi daemon
check_last_scan() {
    if [ ! -e "$wifi_list_path" ]; then
        return 1
    fi

    last_scan=$(stat -c %Y "$wifi_list_path")
    time=$(date +%s)

    if (( $time - $last_scan > $wifidaemon_timeout )); then
        return 1
    fi

    return 0
}

# Prompt nmcli to perform wifi scan
run_scan() {
    notify-send "Scanning available Wi-Fi networks..."
    $daemon_bin
}

# Prompt nmcli to re-scan available wifi stations
rescan() {
    run_scan
    show_mainmenu
}

# Get current connection status
get_connection_status() {
    connected=$(nmcli -fields WIFI g)
    if [[ "$connected" =~ "enabled" ]]; then
        toggle=$tag_wifi_disable
        if ! check_last_scan -eq; then
            run_scan
        fi
    elif [[ "$connected" =~ "disabled" ]]; then
        toggle=$tag_wifi_enable
    fi
}

# Get known network autoconnect status and construct dmenu fields
get_known_network_options() {
    autoconnect=$(nmcli connection show "$1" | grep autoconnect -m 1 | cut -d ":" -f2)
    if [[ "$autoconnect" =~ "yes" ]]; then
        autoconnect=$tag_autoconnect_off
    else
        autoconnect=$tag_autoconnect_on
    fi
    network_options="$tag_forget_connection\n$autoconnect"
}

# Prompt nmcli to forget a known network
forget_connection() {
    nmcli connection delete "$1"
}

# Prompt nmcli to toggle known network autoconnect setting
toggle_autoconnect() {
    if [ "$2" == "$tag_autoconnect_on" ]; then
        nmcli connection modify "$1" connection.autoconnect yes
    else
        nmcli connection modify "$1" connection.autoconnect no
    fi
}

# Prompt nmcli to connect to a network
connect() {
    connection_msg="Connected to: $chosen_id"
    saved_connections=$(nmcli -g NAME connection)
    if [[ $(echo "$saved_connections" | grep -w "$chosen_id") = "$chosen_id" ]]; then
        nmcli connection up id "$chosen_id" | grep "successfully" && notify-send "$connection_msg"
    else
        if [[ "$chosen" =~ "󰤪" ]] || [[ "$chosen" =~ "󰤧" ]] || [[ "$chosen" =~ "󰤤" ]] || [[ "$chosen" =~ "󰤡" ]] || [[ "$chosen" =~ "󰤬" ]]; then
            wifi_passwd=$(rofi_pwd_prompt)
            if [ "$wifi_passwd" == "" ]; then
                exit 0
            fi
            nmcli device wifi connect "$chosen_id" password $wifi_passwd | grep "successfully" && notify-send "$connection_msg"
        else
            nmcli device wifi connect "$chosen_id" | grep "successfully" && notify-send "$connection_msg"
        fi
    fi
}

# Pre main dmenu setup
wifimenu_setup() {
    if [ "$toggle" == "$tag_wifi_disable" ]; then
        current_wifi=$(cat $current_wifi_path 2>/dev/null)
        wifi_list=$(cat $wifi_list_path 2>/dev/null)
        
        if [ "$current_wifi" == "$tag_not_connected" ]; then
            current_wifi="󰤭      Not connected "
        fi

        menu_prompt="$current_wifi "
        wifi_list_prefix="$tag_manage_known\n$toggle\n$tag_rescan"
        selection=2
    else
        menu_prompt="󰤮      Wi-Fi disabled "
        wifi_list=""
        wifi_list_prefix="$tag_wifi_enable"
        selection=0
    fi

    if [[ "$wifi_list" != "" ]]; then
        wifi_list_prefix="$wifi_list_prefix\n"
    fi

    mainmenu_options="$wifi_list_prefix$wifi_list"

    rows=$(echo -e "$mainmenu_options" | wc -l)
    if [ "$rows" -gt 12 ]; then
        rows=12
    fi
}

# Display wifimenu
show_mainmenu() {
    wifimenu_setup

    if [[ -v $1 ]]; then
        selection=$1
    fi

    chosen=$(echo -e "$mainmenu_options" | uniq -u | rofi_menu_offset "$menu_prompt" "$selection" "$rows")
    read -r chosen_id <<< "${chosen:2}"

    case "$chosen" in
        "")
            exit
            ;;

        "$tag_wifi_enable")
            nmcli radio wifi on
            get_connection_status
            sleep 0.2
            rescan
            ;;

        "$tag_wifi_disable")
            nmcli radio wifi off
            get_connection_status
            rescan
            ;;

        "$tag_manage_known")
            show_manage_submenu
            ;;

        "$tag_rescan")
            sleep 0.2
            rescan
            ;;

        *)
            connect
            ;;
    esac
}

# Display "Manage known networks" submenu
show_manage_submenu() {
    known_networks=$(nmcli connection show | grep "wifi" | sed -r 's/\s{2,}/:/g' | cut -d ':' -f1)

    if [[ "$known_networks" != "" ]]; then
        rows=$(echo -e "$known_networks" | wc -l)
        ((rows++))
        if [ "$rows" -gt 12 ]; then
            rows=12
        fi
        known_networks="\n$known_networks"
    else
        rows=1
    fi

    known_network=$(echo -e "$tag_back$known_networks" | uniq -u | rofi_menu "$tag_manage_known_prompt" "$rows")

    case "$known_network" in
        "")
            exit
            ;;

        "$tag_back")
            show_mainmenu 0
            ;;

        *)
            show_network_submenu 0
            ;;
    esac
}

# Display submenu to edit a known network config
show_network_submenu() {
    get_known_network_options "$known_network"
    chosen_network_option=$(echo -e "$tag_back\n$network_options" | rofi_menu_offset "$known_network" "$1" 3)

    case "$chosen_network_option" in
        "")
            exit
            ;;

        "$tag_forget_connection")
            forget_connection "$known_network"
            sleep 0.2
            show_manage_submenu
            ;;

        *Autoconnect*)
            toggle_autoconnect "$known_network" "$chosen_network_option"
            show_network_submenu 2
            ;;

        "$tag_back")
            show_manage_submenu
            ;;
    esac
}

# Wifimenu entry point
get_connection_status
show_mainmenu
