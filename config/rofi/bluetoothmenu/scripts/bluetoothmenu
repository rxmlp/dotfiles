#!/bin/bash
#
#  ▄▄▄▄    ██▓     █    ██ ▓█████▄▄▄█████▓ ▒█████   ▒█████  ▄▄▄█████▓ ██░ ██  ███▄ ▄███▓▓█████  ███▄    █  █    ██ 
# ▓█████▄ ▓██▒     ██  ▓██▒▓█   ▀▓  ██▒ ▓▒▒██▒  ██▒▒██▒  ██▒▓  ██▒ ▓▒▓██░ ██▒▓██▒▀█▀ ██▒▓█   ▀  ██ ▀█   █  ██  ▓██▒
# ▒██▒ ▄██▒██░    ▓██  ▒██░▒███  ▒ ▓██░ ▒░▒██░  ██▒▒██░  ██▒▒ ▓██░ ▒░▒██▀▀██░▓██    ▓██░▒███   ▓██  ▀█ ██▒▓██  ▒██░
# ▒██░█▀  ▒██░    ▓▓█  ░██░▒▓█  ▄░ ▓██▓ ░ ▒██   ██░▒██   ██░░ ▓██▓ ░ ░▓█ ░██ ▒██    ▒██ ▒▓█  ▄ ▓██▒  ▐▌██▒▓▓█  ░██░
# ░▓█  ▀█▓░██████▒▒▒█████▓ ░▒████▒ ▒██▒ ░ ░ ████▓▒░░ ████▓▒░  ▒██▒ ░ ░▓█▒░██▓▒██▒   ░██▒░▒████▒▒██░   ▓██░▒▒█████▓ 
# ░▒▓███▀▒░ ▒░▓  ░░▒▓▒ ▒ ▒ ░░ ▒░ ░ ▒ ░░   ░ ▒░▒░▒░ ░ ▒░▒░▒░   ▒ ░░    ▒ ░░▒░▒░ ▒░   ░  ░░░ ▒░ ░░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ 
# ▒░▒   ░ ░ ░ ▒  ░░░▒░ ░ ░  ░ ░  ░   ░      ░ ▒ ▒░   ░ ▒ ▒░     ░     ▒ ░▒░ ░░  ░      ░ ░ ░  ░░ ░░   ░ ▒░░░▒░ ░ ░ 
#  ░    ░   ░ ░    ░░░ ░ ░    ░    ░      ░ ░ ░ ▒  ░ ░ ░ ▒    ░       ░  ░░ ░░      ░      ░      ░   ░ ░  ░░░ ░ ░ 
#  ░          ░  ░   ░        ░  ░            ░ ░      ░ ░            ░  ░  ░       ░      ░  ░         ░    ░     
#       ░                                                                                                          
#                          ▄▄▄▄ ▓██   ██▓    ███▄ ▄███▓ ██▀███        ▄▄▄▄ ▓██   ██▓ ▄▄▄                           
#                         ▓█████▄▒██  ██▒   ▓██▒▀█▀ ██▒▓██ ▒ ██▒     ▓█████▄▒██  ██▒▒████▄                         
#                         ▒██▒ ▄██▒██ ██░   ▓██    ▓██░▓██ ░▄█ ▒     ▒██▒ ▄██▒██ ██░▒██  ▀█▄                       
#                         ▒██░█▀  ░ ▐██▓░   ▒██    ▒██ ▒██▀▀█▄       ▒██░█▀  ░ ▐██▓░░██▄▄▄▄██                      
#                         ░▓█  ▀█▓░ ██▒▓░   ▒██▒   ░██▒░██▓ ▒██▒ ██▓ ░▓█  ▀█▓░ ██▒▓░ ▓█   ▓██▒                     
#                         ░▒▓███▀▒ ██▒▒▒    ░ ▒░   ░  ░░ ▒▓ ░▒▓░ ▒▓▒ ░▒▓███▀▒ ██▒▒▒  ▒▒   ▓▒█░                     
#                         ▒░▒   ░▓██ ░▒░    ░  ░      ░  ░▒ ░ ▒░ ░▒  ▒░▒   ░▓██ ░▒░   ▒   ▒▒ ░                     
#                          ░    ░▒ ▒ ░░     ░      ░     ░░   ░  ░    ░    ░▒ ▒ ░░    ░   ▒                        
#                          ░     ░ ░               ░      ░       ░   ░     ░ ░           ░  ░                     
#                               ░░ ░                              ░        ░░ ░                                    
#
# Script setup
# Theming
script_dir="$(dirname "${BASH_SOURCE[0]}")/.."
conf_dir=$script_dir/config
theme_bluetoothmenu=$conf_dir/bluetoothmenu.rasi

# Dmenu tags
tag_start_scan="󰂰    Start scan"
tag_stop_scan="󰙧    Stop scan"
tag_refresh="    Refresh"

tag_bluetooth_on="󰂲    Disable Bluetooth"
tag_bluetooth_off="󰂯    Enable Bluetooth"

tag_discoverable_on="    Discoverable:    "
tag_discoverable_off="    Discoverable:    "

tag_pairable_on="    Pairable:            "
tag_pairable_off="󱖡    Pairable:            "

tag_back="      Back"
tag_connected_yes="󰂱    Connected:    "
tag_connected_no="󰂲    Connected:    "
tag_paired_yes="    Paired:           "
tag_paired_no="󱖡    Paired:            "
tag_trusted_yes="󰳈    Trusted:         "
tag_trusted_no="    Trusted:         "

# Themed dmenu with a selection offset and number of rows to display
rofi_menu() {
    rofi \
        -dmenu \
        -i \
        -selected-row "$2" \
        -p "$1" \
        -l "$3" \
        -normal-window \
        -theme $theme_bluetoothmenu
}

# Prompt bluez to power on Bluetooth
enable() {
    if rfkill list bluetooth | grep -q 'blocked: yes'; then
        rfkill unblock bluetooth && sleep 2
    fi

    bluetoothctl power on

    if [ $? -ne 0 ]; then
        notify-send "Failed to turn on Bluetooth!"
    fi
}

# Prompt bluez to disable Bluetooth
disable() {
    bluetoothctl power off

    if [ $? -ne 0 ]; then
        notify-send "Failed to turn off Bluetooth!"
    fi
}

# Prompt bluez to set Bluetooth to discoverable
discoverable_on() {
    bluetoothctl discoverable on
}

# Prompt bluez to set Bluetooth to undiscoverable
discoverable_off() {
    bluetoothctl discoverable off
}

# Prompt bluez to set Bluetooth to pairable
pairable_on() {
    bluetoothctl pairable on
}

# Prompt bluez to set Bluetooth to unpairable
pairable_off() {
    bluetoothctl pairable off
}

# Prompt bluez to start scan
# Scanning uses tmux because I had lost my mind getting the
# scan cli commands work w/o interactive session
start_scan() {
    tmux new-session -d -s bluetooth_session "bluetoothctl"
    tmux send-keys -t bluetooth_session "scan on" C-m
    sleep 30
    tmux send-keys -t bluetooth_session "scan off" C-m
    tmux kill-session -t bluetooth_session
}

# Prompt bluez to stop scan
stop_scan() {
    if bluetoothctl show | grep -q "Discovering: yes"; then
        tmux send-keys -t bluetooth_session "scan off" C-m
        tmux kill-session -t bluetooth_session
        if [ -v scan_pid ]; then
            kill $scan_pid
        fi
    fi
    sleep 0.2
}

# Prompt bluez to connect to a device
connect() {
    bluetoothctl connect "$mac"

    if [ $? -eq 0 ]; then
        notify-send "Connected to: $name"
    else
        notify-send "Failed to connect to: $name!"
    fi
}

# Prompt bluez to disconnect from a device
disconnect() {
    bluetoothctl disconnect "$mac"
}

# Prompt bluez to pair with a device
pair() {
    bluetoothctl pair "$mac"

    if [ $? -eq 0 ]; then
        notify-send "Paired with: $name"
    else
        notify-send "Failed to pair: $name!"
    fi
}

# Prompt bluez to unpair device
unpair() {
    bluetoothctl remove "$mac"
}

# Prompt bluez to trust device
trust() {
    bluetoothctl trust "$mac"
}

# Prompt bluez to untrust device
untrust() {
    bluetoothctl untrust "$mac"
}

# Get devices mac and connection/pairing/trust status
get_device_info() {
    mac=$(bluetoothctl devices | grep -e "$1" | cut -d " " -f2)
    device_info=$(echo -e "$mac" | xargs bluetoothctl info)
    name=$1

    if echo -e "$device_info" | grep -q "Connected: yes"; then
        connected="$tag_connected_yes\n"
    else
        connected="$tag_connected_no\n"
    fi

    if echo -e "$device_info" | grep -q "Paired: yes"; then
        paired="$tag_paired_yes\n"
    else
        paired="$tag_paired_no\n"
    fi

    if echo -e "$device_info" | grep -q "Trusted: yes"; then
        trusted="$tag_trusted_yes"
    else
        trusted="$tag_trusted_no"
    fi

    device_options="$tag_back\n$connected$paired$trusted"

    if [ ! -v device_selected_row ]; then
        device_selected_row=0
    fi
}

# Pre main dmenu setup
menu_setup() {
    bluetooth_status=$(bluetoothctl show)

    if echo -e "$bluetooth_status" | grep -q "Powered: yes"; then
        power="$tag_bluetooth_on\n"
        devices=$(bluetoothctl devices | grep Device | cut -d ' ' -f 3- | tac)

        if echo -e "$bluetooth_status" | grep -q "Discovering: yes"; then
            scan="$tag_stop_scan\n"
        else
            scan="$tag_start_scan\n"
        fi

        if echo -e "$bluetooth_status" | grep -q "Discoverable: yes"; then
            discoverable="$tag_discoverable_on\n"
        else
            discoverable="$tag_discoverable_off\n"
        fi

        if echo -e "$bluetooth_status" | grep -q "Pairable: yes"; then
            pairable="$tag_pairable_on\n"
        else
            pairable="$tag_pairable_off\n"
        fi

        refresh="$tag_refresh"
        if [ "$devices" != "" ]; then
            refresh="$refresh\n"
        fi
    else
        scan=""
        discoverable=""
        pairable=""
        refresh=""
        power="$tag_bluetooth_off"
        devices=""
    fi

    mainmenu_options="$power$discoverable$pairable$scan$refresh$devices"

    if [ ! -v mainmenu_selected_row ]; then
        mainmenu_selected_row=4
    fi

    rows=$(echo -e "$mainmenu_options" | wc -l)
    if [ "$rows" -gt 12 ]; then
        rows=12
    fi
}

# Display bluetoothmenu
show_mainmenu() {
    menu_setup
    selected=$(echo -e "$mainmenu_options" | rofi_menu "󰂯    Bluetooth" "$mainmenu_selected_row" "$rows")

    case "$selected" in
        "")
            stop_scan
            exit 0
            ;;

        "$tag_bluetooth_on")
            disable
            mainmenu_selected_row=0
            show_mainmenu
            ;;

        "$tag_bluetooth_off")
            enable
            mainmenu_selected_row=0
            show_mainmenu
            ;;

        "$tag_discoverable_on")
            discoverable_off
            mainmenu_selected_row=1
            show_mainmenu
            ;;

        "$tag_discoverable_off")
            discoverable_on
            mainmenu_selected_row=1
            show_mainmenu
            ;;

        "$tag_pairable_on")
            pairable_off
            mainmenu_selected_row=2
            show_mainmenu
            ;;

        "$tag_pairable_off")
            pairable_on
            mainmenu_selected_row=2
            show_mainmenu
            ;;

        "$tag_start_scan")
            start_scan &
            scan_pid=$!
            sleep 0.2
            mainmenu_selected_row=3
            show_mainmenu
            ;;

        "$tag_stop_scan")
            stop_scan
            mainmenu_selected_row=3
            show_mainmenu
            ;;

        "$tag_refresh")
            mainmenu_selected_row=4
            show_mainmenu
            ;;

        *)
            show_device_submenu "$selected"
            ;;
    esac
}

# Display device options submenu
show_device_submenu() {
    get_device_info "$1"
    device=$(echo -e "$device_options" | rofi_menu "󰂯    $1" "$device_selected_row" 4)

    case "$device" in
        "")
            stop_scan
            exit 0
            ;;

        "$tag_connected_no")
            connect
            device_selected_row=1
            show_device_submenu "$1"
            ;;

        "$tag_connected_yes")
            disconnect
            device_selected_row=1
            show_device_submenu "$1"
            ;;

        "$tag_paired_no")
            pair
            device_selected_row=2
            show_device_submenu "$1"
            ;;

        "$tag_paired_yes")
            unpair
            device_selected_row=2
            show_device_submenu "$1"
            ;;

        "$tag_trusted_no")
            trust
            device_selected_row=3
            show_device_submenu "$1"
            ;;

        "$tag_trusted_yes")
            untrust
            device_selected_row=3
            show_device_submenu "$1"
            ;;

        "$tag_back")
            show_mainmenu
            ;;
    esac
}

show_mainmenu
stop_scan
